#!/usr/bin/python
# -*- coding:utf-8 -*-
import numpy as np
import random
import time
import threading
from fractions import Fraction


# 生成指定数量的随机运算符
def produce_operators(op_num=3):
    op = []                        # 记录生成的op_num个四则运算操作数
    for i in xrange(op_num):
        temp = random.choice(['＋','－','×','÷'])
        op.append(temp)
    return op

# 生成指定数量的随机整数和随机真分数
def produce_numbers(int_num=2,pro_frac_num=2):
    num = []                      # 记录生成的op_num+1个数（包括整数和真分数）
    for i in xrange(int_num):
        int_number = random.randint(0,99)
        temp = Fraction(int_number, 1)  # 生成随机整数
        num.append(temp)
    for i in xrange(pro_frac_num):
        denominator = random.randint(1,99)  # 分母（分母不为0）
        numerator = random.randint(0,denominator-1) # 分子
        proper_fraction = Fraction(numerator,denominator) # 生成随机真分数
        num.append(proper_fraction)
    return num

# 生成题目
def produce_problem(op_num,num,op):
    problem = []
    for i in xrange(op_num):
        number = random.choice(num)
        problem.append(number)
        num.remove(number)
        operator = random.choice(op)
        problem.append(operator)
        op.remove(operator)
        if i == op_num-1:
            problem.append(num[0])
    return problem

# 打印题目
def display_problem(problem):
    record_problem = ''
    for i in problem:
        temp = str(i)
        record_problem = record_problem +temp
    record_problem = record_problem + '='
    print record_problem,
    return record_problem

# 计算题目正确结果
def calculate_result(problem):
    result = ''
    for i in problem:
        if type(i) == type(Fraction(2,3)):
            numerator_temp = i.numerator
            denominator_temp = i.denominator
            temp = 'Fraction(%d,%d)'%(numerator_temp,denominator_temp)
        else:
            if i == '＋':
                temp = '+'
            elif i == '－':
                temp = '-'
            elif i == '×':
                temp = '*'
            else:
                temp = '/'
        result = result + temp
    final_result = str(eval(result))
    # print result
    # print final_result
    return final_result

#记录答题信息
def record_message(show_problem,result,answer,judge_result):
    message = []
    message.append(show_problem)
    message.append(result)
    message.append(answer)
    message.append(judge_result)
    return np.array(message)

# 判断答题者答案是否正确
def judge(answer,result):
    if answer == result:          # 判断正误
        print u'回答正确！'
        return 1
    else:
        print u'回答错误！'
        return 0

# 对答题者进行测试
def test():
    op_num = random.randint(1,10)  # 随机生成的运算符个数
    pro_frac_num = random.randint(0,op_num)  # 随机生成的真分数个数
    int_num = op_num + 1 - pro_frac_num  # 生成整数个数
    op = produce_operators(op_num)        # 随机生成指定数量的运算符
    num = produce_numbers(int_num, pro_frac_num)   # 生成指定数量的随机整数和随机真分数
    problem = produce_problem(op_num, num, op)     # 生成题目
    result = calculate_result(problem)             # 计算题目正确结果
    show_problem = display_problem(problem)        # 打印题目
    answer = raw_input('')                        # 读入答题者答案
    judge_result = judge(answer,result)            # 判断答题者答案
    return record_message(show_problem, result, answer, judge_result)



class timer(threading.Thread):
    def run(self):
        global message_flag
        global test_data
        while message_flag == 1:
            test_data = np.row_stack([test_data, test()])

# 设计测试时间
def test_time(time0):
    global message_flag
    threadone = timer()
    threadone.start()
    time.sleep(time0)
    message_flag = 0

test_data = np.zeros([0, 4])  # 记录题目、正确答案、答题者答案、是否正确
message_flag = 1
if __name__=="__main__":
    time0 = 5            # 设置测试时间
    test_time(time0)
    # for i in xrange(test_data.shape[0]):
    #      for j in xrange(test_data.shape[1]):    # 遍历存储值
    #          print test_data[i,j]